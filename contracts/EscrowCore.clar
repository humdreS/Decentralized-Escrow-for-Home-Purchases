(define-constant ERR-NOT-AUTHORIZED (err u100))
(define-constant ERR-INVALID-STATE (err u101))
(define-constant ERR-INSUFFICIENT-FUNDS (err u102))
(define-constant ERR-ESCROW-CLOSED (err u103))
(define-constant ERR-INVALID-AMOUNT (err u104))
(define-constant ERR-INVALID-PARTY (err u105))
(define-constant ERR-MILESTONE-NOT-FOUND (err u106))
(define-constant ERR-ALREADY-VERIFIED (err u107))
(define-constant ERR-DISPUTE_ACTIVE (err u108))
(define-constant ERR-NO-DISPUTE (err u109))
(define-constant ERR-INVALID-ORACLE (err u110))
(define-constant ERR-TIME-EXPIRED (err u111))
(define-constant ERR-INVALID-DEADLINE (err u112))
(define-constant ERR-PROPERTY-NOT-SET (err u113))
(define-constant ERR-INVALID-MILESTONE (err u114))
(define-constant ERR-ORACLE-NOT-REGISTERED (err u115))
(define-constant ERR-FUNDS-NOT-DEPOSITED (err u116))
(define-constant ERR-ALREADY-DEPOSITED (err u117))
(define-constant ERR-INVALID-RESOLUTION (err u118))
(define-constant ERR-VOTE-ALREADY-CAST (err u119))
(define-constant ERR-INSUFFICIENT-VOTES (err u120))

(define-constant STATE_INITIATED u0)
(define-constant STATE_FUNDED u1)
(define-constant STATE_VERIFIED u2)
(define-constant STATE_DISPUTED u3)
(define-constant STATE_CLOSED u4)
(define-constant STATE_CANCELLED u5)

(define-data-var escrow-state uint STATE_INITIATED)
(define-data-var buyer principal tx-sender)
(define-data-var seller principal tx-sender)
(define-data-var escrow-amount uint u0)
(define-data-var deposit-deadline uint u0)
(define-data-var verification-deadline uint u0)
(define-data-var property-nft-id uint u0)
(define-data-var oracle-contract principal tx-sender)
(define-data-var arbitrator-contract principal tx-sender)
(define-data-var dispute-resolution bool false)
(define-data-var refund-percentage uint u100)

(define-map milestones uint { description: (string-ascii 256), verified: bool, verifier: principal, timestamp: uint })
(define-map disputes uint { active: bool, votes-for-buyer: uint, votes-for-seller: uint, resolved: bool, resolution: bool })
(define-map oracle-registrations principal bool)
(define-map arbitrator-votes uint { voter: principal, vote: bool })

(define-read-only (get-escrow-state)
  (var-get escrow-state)
)

(define-read-only (get-buyer)
  (var-get buyer)
)

(define-read-only (get-seller)
  (var-get seller)
)

(define-read-only (get-escrow-amount)
  (var-get escrow-amount)
)

(define-read-only (get-deposit-deadline)
  (var-get deposit-deadline)
)

(define-read-only (get-verification-deadline)
  (var-get verification-deadline)
)

(define-read-only (get-property-nft-id)
  (var-get property-nft-id)
)

(define-read-only (get-milestone (milestone-id uint))
  (map-get? milestones milestone-id)
)

(define-read-only (get-dispute (dispute-id uint))
  (map-get? disputes dispute-id)
)

(define-read-only (is-oracle-registered (oracle principal))
  (default-to false (map-get? oracle-registrations oracle))
)

(define-private (validate-party (party principal))
  (if (not (is-eq party tx-sender)) (ok true) (err ERR-INVALID-PARTY))
)

(define-private (validate-amount (amount uint))
  (if (> amount u0) (ok true) (err ERR-INVALID-AMOUNT))
)

(define-private (validate-deadline (deadline uint))
  (if (> deadline block-height) (ok true) (err ERR-INVALID-DEADLINE))
)

(define-private (validate-state (expected uint))
  (if (is-eq (var-get escrow-state) expected) (ok true) (err ERR-INVALID-STATE))
)

(define-private (validate-milestone-id (id uint))
  (if (is-some (map-get? milestones id)) (ok true) (err ERR-MILESTONE-NOT-FOUND))
)

(define-private (validate-oracle (oracle principal))
  (if (is-oracle-registered oracle) (ok true) (err ERR-ORACLE-NOT-REGISTERED))
)

(define-private (check-time-expired (deadline uint))
  (if (<= block-height deadline) (ok true) (err ERR-TIME-EXPIRED))
)

(define-public (initialize-escrow (new-buyer principal) (new-seller principal) (amount uint) (dep-deadline uint) (ver-deadline uint) (nft-id uint) (oracle principal) (arbitrator principal))
  (begin
    (try! (validate-party new-buyer))
    (try! (validate-party new-seller))
    (try! (validate-amount amount))
    (try! (validate-deadline dep-deadline))
    (try! (validate-deadline ver-deadline))
    (try! (validate-state STATE_INITIATED))
    (var-set buyer new-buyer)
    (var-set seller new-seller)
    (var-set escrow-amount amount)
    (var-set deposit-deadline dep-deadline)
    (var-set verification-deadline ver-deadline)
    (var-set property-nft-id nft-id)
    (var-set oracle-contract oracle)
    (var-set arbitrator-contract arbitrator)
    (print { event: "escrow-initialized", buyer: new-buyer, seller: new-seller, amount: amount })
    (ok true)
  )
)

(define-public (deposit-funds)
  (begin
    (try! (validate-state STATE_INITIATED))
    (try! (check-time-expired (var-get deposit-deadline)))
    (asserts! (is-eq tx-sender (var-get buyer)) ERR-NOT-AUTHORIZED)
    (try! (stx-transfer? (var-get escrow-amount) tx-sender (as-contract tx-sender)))
    (var-set escrow-state STATE_FUNDED)
    (print { event: "funds-deposited", amount: (var-get escrow-amount) })
    (ok true)
  )
)

(define-public (add-milestone (id uint) (description (string-ascii 256)))
  (begin
    (try! (validate-state STATE_FUNDED))
    (asserts! (is-eq tx-sender (var-get seller)) ERR-NOT-AUTHORIZED)
    (asserts! (is-none (map-get? milestones id)) ERR-ALREADY-VERIFIED)
    (map-set milestones id { description: description, verified: false, verifier: tx-sender, timestamp: u0 })
    (print { event: "milestone-added", id: id, description: description })
    (ok true)
  )
)

(define-public (verify-milestone (id uint))
  (begin
    (try! (validate-state STATE_FUNDED))
    (try! (check-time-expired (var-get verification-deadline)))
    (try! (validate-milestone-id id))
    (try! (validate-oracle tx-sender))
    (let ((milestone (unwrap! (map-get? milestones id) ERR-MILESTONE-NOT-FOUND)))
      (asserts! (not (get verified milestone)) ERR-ALREADY-VERIFIED)
      (map-set milestones id (merge milestone { verified: true, verifier: tx-sender, timestamp: block-height }))
      (print { event: "milestone-verified", id: id })
      (if (all-milestones-verified) (release-funds) (ok true))
    )
  )
)

(define-private (all-milestones-verified)
  (fold check-verified-milestone (map-keys milestones) true)
)

(define-private (check-verified-milestone (id uint) (acc bool))
  (and acc (get verified (unwrap-panic (map-get? milestones id))))
)

(define-private (release-funds)
  (begin
    (try! (validate-state STATE_FUNDED))
    (as-contract (try! (stx-transfer? (var-get escrow-amount) tx-sender (var-get seller))))
    (var-set escrow-state STATE_CLOSED)
    (print { event: "funds-released", to: (var-get seller) })
    (ok true)
  )
)

(define-public (initiate-dispute (dispute-id uint))
  (begin
    (try! (validate-state STATE_FUNDED))
    (asserts! (or (is-eq tx-sender (var-get buyer)) (is-eq tx-sender (var-get seller))) ERR-NOT-AUTHORIZED)
    (asserts! (is-none (map-get? disputes dispute-id)) ERR-DISPUTE_ACTIVE)
    (map-set disputes dispute-id { active: true, votes-for-buyer: u0, votes-for-seller: u0, resolved: false, resolution: false })
    (var-set escrow-state STATE_DISPUTED)
    (print { event: "dispute-initiated", id: dispute-id })
    (ok true)
  )
)

(define-public (vote-on-dispute (dispute-id uint) (vote-for-buyer bool))
  (begin
    (try! (validate-state STATE_DISPUTED))
    (asserts! (is-eq tx-sender (var-get arbitrator-contract)) ERR-NOT-AUTHORIZED)
    (let ((dispute (unwrap! (map-get? disputes dispute-id) ERR-NO-DISPUTE)))
      (asserts! (get active dispute) ERR-NO-DISPUTE)
      (asserts! (is-none (map-get? arbitrator-votes dispute-id)) ERR-VOTE-ALREADY-CAST)
      (map-set arbitrator-votes dispute-id { voter: tx-sender, vote: vote-for-buyer })
      (if vote-for-buyer
        (map-set disputes dispute-id (merge dispute { votes-for-buyer: (+ (get votes-for-buyer dispute) u1) }))
        (map-set disputes dispute-id (merge dispute { votes-for-seller: (+ (get votes-for-seller dispute) u1) })))
      (print { event: "dispute-voted", id: dispute-id, vote: vote-for-buyer })
      (if (>= (+ (get votes-for-buyer dispute) (get votes-for-seller dispute)) u3) (resolve-dispute dispute-id) (ok true))
    )
  )
)

(define-private (resolve-dispute (dispute-id uint))
  (let ((dispute (unwrap! (map-get? disputes dispute-id) ERR-NO-DISPUTE)))
    (let ((resolution (if (> (get votes-for-buyer dispute) (get votes-for-seller dispute)) true false)))
      (map-set disputes dispute-id (merge dispute { resolved: true, resolution: resolution, active: false }))
      (var-set escrow-state STATE_CLOSED)
      (if resolution (refund-buyer) (release-funds))
      (print { event: "dispute-resolved", id: dispute-id, resolution: resolution })
      (ok true)
    )
  )
)

(define-private (refund-buyer)
  (begin
    (as-contract (try! (stx-transfer? (var-get escrow-amount) tx-sender (var-get buyer))))
    (print { event: "funds-refunded", to: (var-get buyer) })
    (ok true)
  )
)

(define-public (cancel-escrow)
  (begin
    (try! (validate-state STATE_INITIATED))
    (asserts! (or (is-eq tx-sender (var-get buyer)) (is-eq tx-sender (var-get seller))) ERR-NOT-AUTHORIZED)
    (var-set escrow-state STATE_CANCELLED)
    (print { event: "escrow-cancelled" })
    (ok true)
  )
)

(define-public (register-oracle (oracle principal))
  (begin
    (asserts! (is-eq tx-sender (var-get oracle-contract)) ERR-NOT-AUTHORIZED)
    (map-set oracle-registrations oracle true)
    (print { event: "oracle-registered", oracle: oracle })
    (ok true)
  )
)

(define-public (set-refund-percentage (percentage uint))
  (begin
    (asserts! (and (>= percentage u0) (<= percentage u100)) ERR-INVALID-RESOLUTION)
    (asserts! (is-eq tx-sender (var-get seller)) ERR-NOT-AUTHORIZED)
    (var-set refund-percentage percentage)
    (ok true)
  )
)

(define-read-only (get-refund-percentage)
  (var-get refund-percentage)
)